name: Node.js CI

on: [push, workflow_dispatch]

jobs:

  build:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v2

      - run:  echo "version=1.0.1" > report_correction.txt
      - run:  echo GITHUB_REPOSITORY=$GITHUB_REPOSITORY > report_correction.txt

      - name: text exist
        uses: ./.github/actions/text-exist
        with:
         filename: ReadMeSquelette.md
         text: "D'où vient l'idée de base pour ce squelette?;Le Joueur demande à redémarrer l'application;Le Système termine tous les jeux en cours et redémarre l'application;- d3.valeur est devenue un nombre entier aléatoire entre 1 et 6;- j.nbLancersGagnés a été incrémenté si la totale de d1.valeur, d2.valeur, d3.valeur est plus petit ou égal à 10"
         report: "report_correction.txt"

      - name: text exist
        uses: ./.github/actions/text-exist
        with:
         filename: docs/modeles/dcu.puml
         text: "(Redémarrer) as R #powderblue;J -- R"
         report: "report_correction.txt"

      - name: text exist
        uses: ./.github/actions/text-exist
        with:
         filename: docs/modeles/dss-redemarrer.puml
         text: ":Joueur;:Système;redémarrerJeu();->"
         report: "report_correction.txt"

      - name: text exist
        uses: ./.github/actions/text-exist
        with:
         filename: docs/modeles/rdcu-redemarrer.puml
         text: ":JeuDeDes;joueurs:;Map<String,Joueur>;redemarrerJeu();clear(); Contrôleur;Expert"
         report: "report_correction.txt"

      - name: text exist
        uses: ./.github/actions/text-exist
        with:
         filename: "test/redemarrer.test.ts"
         text: "GET /api/v1/jeu/redemarrerJeu;Call responds with bad request when players do not exist"
         report: "report_correction.txt"
   
      - name: text exist
        uses: ./.github/actions/text-exist
        with:
         filename: "src/routes/JeuRouter.ts"
         text: "this.router.get('/redemarrerJeu', this.redemarrerJeu.bind(this));redemarrerJeu(req: Request, res: Response, next: NextFunction) {;this.jeu.redemarrerJeu();résultat.v3"
         report: "report_correction.txt"

      - name: text exist
        uses: ./.github/actions/text-exist
        with:
         filename: "src/core/JeuDeDes.ts"
         text: "redemarrerJeu() {;this.joueurs.clear();private d3 : De;this.d3 = new De();this.d3.brasser();let v3 = this.d3.valeur; let somme = v1 + v2 + v3;<= 10; v3: v3,"
         report: "report_correction.txt"

      - name: text exist
        uses: ./.github/actions/text-exist
        with:
         filename: "views/index.pug"
         text: "button.redemarrer Redémarrer"
         report: "report_correction.txt"

      - name: text exist
        uses: ./.github/actions/text-exist
        with:
         filename: "public/lib/main.js"
         text: '$("button.redemarrer").click(function () {;$.get("/api/v1/jeu/redemarrerJeu"'
         report: "report_correction.txt"
      
      - name: text exist
        uses: ./.github/actions/text-exist
        with:
         filename: "docs/modeles/mdd.puml"
         text: 'JeuDeDes "1" -- "3" Dé : inclut >'
         report: "report_correction.txt"

      - name: text exist
        uses: ./.github/actions/text-exist
        with:
         filename: "docs/modeles/rdcu-jouer.puml"
         text: 'participant "d3:De" as d3;participant "d3:De" as d3;c->d3 : brasser();note right : selon Expert;c->d3 : v3 = valeur;note right : selon Expert;opt v1 + v2 + v3 <= 10'
         report: "report_correction.txt"

      - name: text exist
        uses: ./.github/actions/text-exist
        with:
         filename: "test/jeu.test.ts"
         text: 'expect(response.body.resultat.v3).toBeWithin(1, 7)'
         report: "report_correction.txt"

    
      - name: text-exist statistics
        id: statistics
        run: |
          file_missing=$(cat report_correction.txt | grep EXIST | grep false | wc -l)
          nb_error=$(cat report_correction.txt | grep ERROR |  wc -l)
          nb_success=$(cat report_correction.txt | grep SUCCES | wc -l)
          total_text_exist=$(( $nb_error + $nb_success ))
          percent_success=$(( $nb_success  / $total_text_exist )).$(( ($nb_success  * 100 / $total_text_exist) % 100 ))
          
          echo " " >> report_correction.txt
          echo "Text exist statistics" >> report_correction.txt
          echo "file_missing=$file_missing"  >> report_correction.txt
          echo "nb_error=$nb_error" >> report_correction.txt
          echo "nb_success=$nb_success" >> report_correction.txt
          echo "total_text_exist=$total_text_exist" >> report_correction.txt
          echo "percent_success=$percent_success" >> report_correction.txt

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      
      - uses: actions/checkout@v2
      - run: npm install
      - run: npm run build --if-present
      - run: npm run testj || true

      - name: TEST STATISTICS
        id: test_stats
        run: |
          if [ -f "jest.json" ]; then
            numPassedTests=$(grep -o '"numPassedTests":[0-9][0-9,\"][0-9,\"]' jest.json | tr -d ',' | tr -d '"') 
            numPassedTests=${numPassedTests//'numPassedTests:'/}
            numFailedTests=$(grep -o '"numFailedTests":[0-9][0-9,\"][0-9,\"]' jest.json | tr -d ',' | tr -d '"') 
            numFailedTests=${numFailedTests//'numFailedTests:'/}
            nb_total_test=$(( $numPassedTests + $numFailedTests ))
            percent_test=$(( $numPassedTests  / $nb_total_test )).$(( ($numPassedTests  * 100 / $nb_total_test ) % 100 ))

            echo " " >> report_correction.txt
            echo "test statistics" >> report_correction.txt 
            echo "numPassedTests=$numPassedTests" >> report_correction.txt
            echo "numFailedTests=$numFailedTests" >> report_correction.txt
            echo "nb_total_test=$nb_total_test" >> report_correction.txt
            echo "percent_test=$percent_test" >> report_correction.txt
          else
            echo " " >> report_correction.txt
            echo "test statistics" >> report_correction.txt 
            echo "numPassedTests=0" >> report_correction.txt
            echo "numFailedTests=0" >> report_correction.txt
            echo "nb_total_test=0" >> report_correction.txt
            echo "percent_test=0" >> report_correction.txt
          fi


      - name: UNCOVERED FILES BY TEST"
        id: uncovered
        run: |
          if [ -d "coverage" ] && [ -f "coverage/lcov-report/index.html" ]; then
            coverage_info=$(sed -n "/<span class=\"strong\">/p" coverage/lcov-report/index.html)
            full_coverage_info=$(echo $coverage_info | grep "100%" || true) 
            echo "$full_coverage_info"
            if [ -z "$full_coverage_info"]; then
              uncovered_lines=0
            else
              uncovered_lines=$(sed -n "/<span class=\"strong\">/p" coverage/lcov-report/index.html | grep "100%" | wc -l )
            fi
           
            echo " " >> report_correction.txt
            echo "Uncovered info " >> report_correction.txt
            echo "uncovered_lines=$uncovered_lines" >> report_correction.txt
            sed -n "/<span class=\"strong\">/p" coverage/lcov-report/index.html  >> report_correction.txt
          else
            echo "Coverage report not generated because of test failure" >> report_correction.txt
            echo "uncovered_lines=0" >> report_correction.txt
          fi

      - name: COMPUTE NOTES
        run: |
          nb_success=$(cat "report_correction.txt" | grep "nb_success" | awk 'BEGIN { FS = "=" } ; {print $2}' )
          total_text_exist=$(cat "report_correction.txt" | grep "total_text_exist" | awk 'BEGIN { FS = "=" } ; {print $2}' )

          numPassedTests=$(cat "report_correction.txt" | grep "numPassedTests" | awk 'BEGIN { FS = "=" } ; {print $2}' )
          nb_total_test=$(cat "report_correction.txt" | grep "nb_total_test" | awk 'BEGIN { FS = "=" } ; {print $2}' )

        
          uncovered_lines=$(cat "report_correction.txt" | grep "uncovered_lines" | awk 'BEGIN { FS = "=" } ; {print $2}' )
          uncovered_lines_total=4
          
          # echo "nb_success=$nb_success, total_text_exist=$total_text_exist , numPassedTests=$numPassedTests,  nb_total_test=$nb_total_test ,uncovered_lines=$uncovered_lines, uncovered_lines_total=$uncovered_lines_total "

          total=$(( $total_text_exist + $nb_total_test + $uncovered_lines_total ))
          pass=$(( $nb_success + $numPassedTests + $uncovered_lines ))
          note=$(( $pass  / $total )).$(( ($pass  * 100 / $total ) % 100 ))
            
          echo " " >> report_correction.txt
          echo "Statistiques finales "  >> report_correction.txt
          echo "total=$total" >> report_correction.txt
          echo "pass=$pass" >> report_correction.txt
          echo "note finale=$note"  >> report_correction.txt
          
      - name: GET STUDENT NAME
        run: |
            student_name=$(sed -n '/studentName/p' README.md | sed  's:</studentName>:\'$'\n'':g'  | sed -n 's/.*>//p')
            echo "student_name=$student_name" >> report_correction.txt

      - run: cat report_correction.txt

      - name: COMMIT REPORT
        run: |
          git config --global user.name 'Yvan Ross'
          git config --global user.email 'yvan.ross@gmail.com'
          git add .
          git commit -am "Automated report generated by Yvan Ross"
          git push

      - name: UPLOAD report_correction.txt
        uses: actions/upload-artifact@v2
        with: 
          name: reports
          path: report_*.txt
      

    env:
        CI: true